name: OCXR to OvGME

on:
  push:
    branches: [ main ]

  workflow_dispatch:
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Create OvGME compatible package
    steps:
      - uses: actions/checkout@v2
      
      - name: Get latest GitHub release
        id: latest-github-release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Fetch OCXR Release Details
        run: |
          pip install -r requirements.txt
          output=$(python src/fetch-latest-release.py)
          output_vars=(${output//$'\n'/ })

          echo "${output_vars[0]}"
          
          echo "::set-output name=ocxr_tag::${output_vars[0]}"
          echo "::set-output name=ocxr_version::${output_vars[1]}"
          echo "::set-output name=ocxr_release_asset::${output_vars[2]}"
        id: ocxr-release-details

      - run: |
          [[ "${{ steps.latest-github-release.outputs.tag_name }}" = "${{ steps.ocxr-release-details.outputs.ocxr_tag }}" ]] && shouldRun=false || shouldRun=true
          echo "::set-output name=should_release::$shouldRun"
        id: release-status

      - run: echo "A local release already exists for ${{ steps.ocxr-release-details.outputs.ocxr_tag }}"
        if: steps.release-status.outputs.should_release == 'false'

      - name: Create OvGME Package
        id: ovgme-package
        run: |
          [ -d tmp ] && rm -r tmp
          [ -d build ] && rm -r build
          mkdir tmp && cd tmp && curl -LJO ${{ steps.ocxr-release-details.outputs.ocxr_release_asset }}
          unzip *.zip -d ../build/ && cd ../build/*

          directory_name=${PWD##*/}
          mv D3DCompiler_47/D3DCompiler_47.dll ./D3DCompiler_47.dll && rmdir D3DCompiler_47
          echo -e '\n\nforceConnectedTouch=disabled\nrenderCustomHands=disabled' >> opencomposite.ini

          mkdir bin

          shopt -s extglob dotglob
          mv !(bin) bin
          shopt -u dotglob

          cd ../
          cat > VERSION.txt <<EOF
          ${{ steps.ocxr-release-details.outputs.ocxr_version }}
          EOF

          zip -r $directory_name.zip .

          echo "::set-output name=artifact_name::$directory_name"
        if: steps.release-status.outputs.should_release == 'true'
        
      - name: Create GitHub Release
        uses: actions/create-release@v1
        if: steps.release-status.outputs.should_release == 'true'
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.ovgme-package.outputs.artifact_name }}_${{ steps.ocxr-release-details.outputs.ocxr_tag }}
          tag_name: ${{ steps.ocxr-release-details.outputs.ocxr_tag }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        if: steps.release-status.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/${{ steps.ovgme-package.outputs.artifact_name }}.zip
          asset_name: ${{ steps.ovgme-package.outputs.artifact_name }}.zip
          asset_content_type: application/gzip
